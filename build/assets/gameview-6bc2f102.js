var m=Object.defineProperty;var g=(n,t,e)=>t in n?m(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var a=(n,t,e)=>(g(n,typeof t!="symbol"?t+"":t,e),e);import{$ as s}from"./pageCommonInit-9ea57622.js";/* empty css                 */import{N as w,C}from"./nexusClient-88cb175b.js";import{I as v,G as p,E as h}from"./inventoryComponent-1050096a.js";import{C as u}from"./modalGeneral-91a492db.js";class l{constructor(t){a(this,"machine");this.machine=t}}class k extends l{drawToScreen(){this.machine.drawAnnouncer("Esperando jugadores");const t=this.machine.dialog.notify(this.machine,"nexusClientGetPlayers",{});s.get("../../templates/waitingRoomPlayer.html",function(e){s("#main-game-view").empty(),t.forEach(i=>{let r=e,c={"{{player_name_place_holder}}":i.username};for(let d in c)c.hasOwnProperty(d)&&(r=r.replace(d,c[d]));s("#main-game-view").append(r)})})}}class x extends l{drawToScreen(){this.machine.drawAnnouncer("Inventario"),s("#main-game-view").empty(),new v(s("#main-game-view"),t=>{console.log(t),this.machine.dialog.notify(this.machine,"getDataFromInventory",t)})}}class f extends l{constructor(t){super(t)}drawToScreen(){this.machine.drawAnnouncer("Esperando Inicio de Partida..."),s("#main-game-view").empty(),s("#main-game-view").append(`<div class="container-battle">
            <!-- Vista batalla -->
            <div class="player-col enemy" id="top"></div> <!-- Jugador enemigo -->
            <div class="player-col side-1" id="left"></div> <!-- Jugador extra 1 -->
            <div class="player-col side-2" id="right"></div> <!-- Jugador extra 2 -->
            <div class="player-col user" id="bottom"></div> <!-- Jugador principal -->
            <div class="card-deck">
                <div class="deck">
                    <div class="deck-text"><p id="count">Restantes: 0</p></div>
                </div>
            </div>
            <!-- Baraja -->
            <!-- <div class="card-hand" id="deckGameplay"></div> -->
            <div class="row card-hand" id="deckGameplay">
        
            <!-- <div class="deck">
                    <div class="deck-text">
                        <p id="count">Cartas Restantes: n</p>
                    </div>
                </div>
        
                <div class="deck">
                    <div class="deck-text">
                        <p id="count">Cartas Restantes: n</p>
                    </div>
                </div>
        
                <div class="deck">
                    <div class="deck-text">
                        <p id="count">Cartas Restantes: n</p>
                    </div>
                </div>-->
        
            </div> <!-- Mano de juego -->
        </div>
        
        <!-- Vista batalla -->
        `),this.machine.dialog.notify(this.machine,"clientLoadedGameView",{})}}var o=(n=>(n[n.GeneralScreen=0]="GeneralScreen",n[n.ConnectionError=1]="ConnectionError",n[n.WaitingRoom=2]="WaitingRoom",n[n.Inventory=3]="Inventory",n[n.Gameplay=4]="Gameplay",n[n.Results=5]="Results",n[n.Rewards=6]="Rewards",n))(o||{});class y extends u{constructor(e){super(e);a(this,"functionalState");a(this,"currentState")}init(){this.changeMachineState(2),this.drawToScreen()}changeMachineState(e){switch(e){case 0:console.log("State Machine: OK!");break;case 1:console.error("Connection Error Scene not defined yet.");break;case 2:this.currentState=2,this.functionalState=new k(this);break;case 3:this.currentState=3,this.functionalState=new x(this);break;case 4:this.currentState=4,this.functionalState=new f(this);break;case 5:console.error("Results Scene not defined yet.");break;case 6:console.error("Rewards Scene not defined yet.");break;default:console.error("State Machine Critical Error: Attempted to set an state that is undefined!");break}}drawToScreen(){this.functionalState.drawToScreen()}drawAnnouncer(e){s("#room-announcer").text(e)}}class S extends u{constructor(e){super(e);a(this,"currentRound",1);a(this,"currentTurn",1);a(this,"assignedTurn",-1);a(this,"maxNumber",-1);a(this,"intervID");a(this,"handleTurnProgress",()=>{this.currentTurn+=1,this.currentTurn>this.maxNumber&&(this.currentRound+=1,this.currentTurn=1,this.sendUpdateRoundSignal()),this.checkForTurnActive()});a(this,"sendUpdateRoundSignal",()=>{this.dialog.notify(this,"newRound",{turn:this.currentRound})});a(this,"countdown",()=>{let e=60;this.intervID=setInterval(()=>{e>-1&&e--,e==0?this.actionFinishTurn():this.dialog.notify(this,"updateCounterData",{timer:e})},1e3)});a(this,"removeTimer",()=>{clearInterval(this.intervID)});a(this,"actionAttack",()=>{});a(this,"actionFinishTurn",()=>{this.removeTimer(),this.dialog.notify(this,"actionFinishTurn",{})})}setAssignerTurn(e,i){this.assignedTurn=e,this.maxNumber=i,this.sendUpdateRoundSignal(),this.checkForTurnActive()}checkForTurnActive(){this.currentTurn==this.assignedTurn?(this.dialog.notify(this,"yourTurn",{turn:this.currentRound}),this.countdown()):this.dialog.notify(this,"notYourTurn",{turn:this.currentRound})}}class M{constructor(){a(this,"nexusClient");a(this,"chatComponent");a(this,"stateMachine");a(this,"turnManager");a(this,"gameViewHandler");a(this,"init",()=>{this.gameViewHandler.init()});a(this,"handleChatEvent",(t,e)=>{switch(t){case"sendChatMessage":const i=e.toString();this.nexusClient.sendChatMessage(i);break}});a(this,"handleNexusClientEvent",(t,e)=>{switch(t){case"newChatStatusMessage":case"newChatGeneralMessage":const i=e;this.chatComponent.insertNewMessage(i.player_name,i.message_content);break;case"nexusJoinedRoom":this.stateMachine.init(),this.gameViewHandler.setMyLocalSessionID(this.nexusClient.colyseusRoom.sessionId);break;case"nexusClientJoinedRoom":this.stateMachine.currentState==o.WaitingRoom&&(this.stateMachine.drawToScreen(),this.chatComponent.insertNewMessage(e.username,"Se ha unido!"));break;case"nexusClientLeftRoom":this.stateMachine.currentState==o.WaitingRoom&&(this.stateMachine.drawToScreen(),this.chatComponent.insertNewMessage(e.username,"Ha salido!"));break;case"nexusRoomReady":this.gameViewHandler.setMyLocalSessionID(this.nexusClient.colyseusRoom.sessionId),this.stateMachine.changeMachineState(o.Inventory),this.stateMachine.drawToScreen();break;case"nexusGetTurn":this.gameViewHandler.disableButtonsForTurnAction(),this.nexusClient.sendLocalCardID(this.gameViewHandler.inventoryManager.heroInitialID),this.turnManager.setAssignerTurn(e.turn,this.nexusClient.nexusClientGetPlayers().size),this.gameViewHandler.inventoryManager.initializeFirstCards();break;case"playerHasTerminatedTurn":console.log("End Turn Signal"),this.turnManager.handleTurnProgress();break;case"registerRemotePlayerCard":this.gameViewHandler.drawNewPlayer(e.remoteID,e.cardID);break;case"remoteAttackRecieved":this.nexusClient.sessionId==e.remoteID&&this.gameViewHandler.registerPlayerDecorator({poder:0,vida:-e.dmg,defensa:0,ataqueBase:0,ataqueRnd:0,daÃ±o:0},-1),this.gameViewHandler.updateClientEffectiveDamage(e.remoteID,e.dmg);break;case"recievedDecoratorNotif":this.gameViewHandler.registerRemoteDecorator(e.remoteID,e.heroe,e.turnos,e.remoteCardID);break}});this.nexusClient=new w(this),this.chatComponent=new C(this),this.stateMachine=new y(this),this.turnManager=new S(this),this.gameViewHandler=new p(this)}notify(t,e,i){if(t==this.nexusClient&&this.handleNexusClientEvent(e,i),t==this.chatComponent&&this.handleChatEvent(e,i),t==this.gameViewHandler&&this.handleViewEvent(e,i),t==this.stateMachine)return this.handleStateMachineEvent(e,i);t==this.turnManager&&this.handleTurnManagerEvent(e,i)}handleTurnManagerEvent(t,e){switch(t){case"newRound":this.stateMachine.drawAnnouncer("Turno: "+e.turn),this.gameViewHandler.updateDecorators();break;case"yourTurn":this.gameViewHandler.enableButtonsForTurnAction();break;case"notYourTurn":this.stateMachine.drawAnnouncer("Turno: "+e.turn),this.gameViewHandler.disableButtonsForTurnAction();break;case"updateCounterData":this.stateMachine.drawAnnouncer(`Es tu turno! (Restante: ${e.timer}s)`);break;case"actionFinishTurn":this.stateMachine.drawAnnouncer("Comunicando..."),this.nexusClient.sendClientFinishedTurn();break}}handleViewEvent(t,e){switch(t){case"nexusStartMatch":e.parameter==0?this.nexusClient.nexusClientCreateRoom():e.parameter==1&&this.nexusClient.nexusClientJoinRoom(),this.chatComponent.init(e.chatNode);break;case"ClientSkipAction":this.turnManager.actionFinishTurn();break;case"rivalCardPressed":switch(e.currentAction){case h.None:console.log("None!");break;case h.Attack:const i=this.nexusClient.nexusClientGetPlayers();if(i.get(e.remoteID).team!=i.get(this.nexusClient.sessionId).team||i.get(e.remoteID).team==-1){console.log("Attack!");let r=this.gameViewHandler.getDamageValue(e.remoteID);this.nexusClient.sendClientAttack(e.remoteID,r),this.turnManager.actionFinishTurn(),this.gameViewHandler.setCurrentAction(h.None)}break}break;case"createdLocalDecorator":console.log("SENT!"),this.nexusClient.sendClientCreatedDecorator(e);break}}handleStateMachineEvent(t,e){let i=-1;switch(t){case"nexusClientGetPlayers":i=this.nexusClient.nexusClientGetPlayers();break;case"clientLoadedGameView":this.nexusClient.sendClientGameViewLoaded();break;case"getSessionID":i=this.nexusClient.sessionId;break;case"getDataFromInventory":this.gameViewHandler.inventoryManager.setFromInventory(e.cardDictionary,e.cardDeck),this.stateMachine.changeMachineState(o.Gameplay),this.stateMachine.drawToScreen(),this.gameViewHandler.drawLocalPlayer();break}return i}}s(()=>{new M().init()});
